from django.contrib.auth import login, get_user_model
from social_core.backends.vk import VKOAuth2
from .exceptions import LoginDeniedException

import datetime
import logging
logger = logging.getLogger('site_events')

# uid       - user id in the network
# response  - server response with user details (depends on provider)
# details   - some sum-ups from response, generated by a backend
def load_user (uid, backend, response = {}, **kwargs):
    User = get_user_model()
    user = User.objects.get(account_id = uid)
    if user is None:
        logger.info('unknown VK user tried to login using uid={0}'.format(uid), extra={'user': 'anonymous'})
        raise LoginDeniedException('This user is unregistered.')
    if isinstance(backend, VKOAuth2):
        url = response['photo_100']
        if not user.avatar_url or user.avatar_url != url:
            if len(url) > User._meta.get_field('avatar_url').max_length:
                logger.warning(
                    'avatar url is too long (max={}, got={})'.format(
                        User._meta.get_field('avatar_url').max_length,
                        len(url)
                    ),
                    extra={'user': user.get_full_name()}
                )
                user.avatar_url = ''
            else:
                user.avatar_url = url
            user.save(update_fields=['avatar_url'])
    logger.info('logged in from VK', extra={'user': user.get_full_name()})
    return {'user': user}

# crutch?
#def force_login (user, strategy, **kwargs):
#    request = strategy.request
#    login(request, user)

#def log_details (responce = {}, details = {}, **kwargs):
#    log.info(force_text(str(dir(details))))
#    log.info(force_text(str(dir(responce))))
