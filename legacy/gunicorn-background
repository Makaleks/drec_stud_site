#!/bin/sh
#
# Gunicorn SystemV daemon
#
# chkconfig: 345 20 80
# description: an init.d script to run Gunicorn (a Python server)
#
### BEGIN INIT INFO
# Provides: gunicorn-background
# Required-Start: $local_fs $remote_fs $network
# Required-Stop: $local_fs $remote_fs $network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop Gunicorn in background
### END INIT INFO


# How to use:
# cp gunicorn-background /etc/init.d/gunicorn-background
# $ sudo /etc/init.d/gunicorn-background stop
# $ sudo /etc/init.d/gunicorn-background start
# $ sudo /etc/init.d/gunicorn-background status
# Autostart:
# $ sudo chkconfig gunicorn-background on


# Source function library.
#. /etc/rc.d/init.d/functions

########## processname: gunicorn-service

# CHANGE THESE VARIABLES
USER=admin
DAEMON_PATH="/home/admin/drec_stud_site/"
# ENDCHANGE

DAEMON_ENV="env/bin/python"
DAEMON_PROG="env/bin/gunicorn"
DAEMON="${DAEMON_ENV} ${DAEMON_PROG}"
#DAEMONOPTS="--reload -b localhost:8080 --pythonpath src/ drec_stud_site.wsgi:application"
DAEMONOPTS="--reload -b localhost:8080 -w 4 --pythonpath src/ drec_stud_site.wsgi:application"

SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
NAME=`/bin/basename $DAEMON_PROG`
PIDFILE=/var/run/$NAME.pid

RETVAL=0

ASCII_RES_COL=60
ASCII_MOVE_TO_COL="echo -en \\033[${ASCII_RES_COL}G"
ASCII_SETCOLOR_SUCCESS="echo -en \\033[1;32m"
ASCII_SETCOLOR_FAILURE="echo -en \\033[1;31m"
ASCII_SETCOLOR_NORMAL="echo -en \\033[0;39m"

echo_success() {
    $ASCII_MOVE_TO_COL
    echo -n "["
    $ASCII_SETCOLOR_SUCCESS
    echo -n $"  OK  "
    $ASCII_SETCOLOR_NORMAL
    echo -ne "]\n"
}
echo_failure() {
    $ASCII_MOVE_TO_COL
    echo -n "["
    $ASCII_SETCOLOR_FAILURE
    echo -n $"FAILED"
    $ASCII_SETCOLOR_NORMAL
    echo -ne "]\n"
}

stop() {
    pid=`cat ${PIDFILE} 2> /dev/null`
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        return 1
    fi
    kill $pid
    RETVAL=$?
    rm -f $PIDFILE
#killproc -p ${PIDFILE} ${NAME}
    return $RETVAL
}
start() {
#echo $PIDFILE
    if [ -f "$PIDFILE" ]; then
        stop
    fi

    touch $PIDFILE 2> /dev/null
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        echo_failure
        echo "PIDFILE $PIDFILE is not accessable"
        return 1
    fi
    cd $DAEMON_PATH
#daemon --pidfile="${PIDFILE}" --user=${USER} "${DAEMON} ${DAEMONOPTS} &" &> /dev/null
    ${DAEMON} ${DAEMONOPTS} &> /dev/null &
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        echo_failure
        echo "Failed to run ${DAEMON} ${DAEMONOPTS}"
        return 1
    fi
    pid=$!
#pid=`ps -A | grep $NAME | cut -d" " -f1`
#pid=`echo $pid | cut -d" " -f1`
    if [ -n "$pid" ]; then
        echo $pid > "$PIDFILE"
    fi
    return $RETVAL
}
reload() {
    stop
    start
    return $?
}


case "$1" in
start)
#rh_status >/dev/null 2>&1 && exit 0
    echo -n $"Starting $NAME: "
    start
    if [ $? -eq 0 ]; then
        echo_success
    fi
;;
status)
    printf "%-50s" "Checking $NAME..."
    if [ -f $PIDFILE ]; then
        PID=`cat $PIDFILE`
        if [ -z "`ps axf | grep ${PID} | grep -v grep`" ]; then
            printf "%s\n" "Process dead but pidfile exists"
        else
            echo "Running"
        fi
    else
        printf "%s\n" "Service not running"
    fi
;;
stop)
    echo -n $"Stopping $NAME: "
    stop
    RETVAL=$?
    if [ $RETVAL -eq 0 ]; then
        echo_success
    else
        echo_failure
    fi
;;
restart)
    echo -n $"Restarting $NAME: "
    restart
    if [ $? -eq 0 ]; then
        echo_success
    fi
;;

*)
    echo "Usage: $0 {status|start|stop|restart}"
    exit 1
esac

